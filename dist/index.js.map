{"version":3,"sources":["../src/index.ts","../src/Identifier.ts","../src/services/input/InputService.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {InputServiceName} from \"./Identifier\";\r\nimport {InputService} from \"./services/input/InputService\";\r\nexport * from \"./services/input/InputService\";\r\n\r\nexport * from \"./Identifier\";\r\n\r\nexport class AxInputModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(InputServiceName).toDynamicValue(() => {\r\n                return new InputService()\r\n            }).inSingletonScope();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n","export const InputServiceName = Symbol.for(\"InputServiceName\");\r\n","export type InputType = \"keyboard\" | \"compound_1d\" | \"compound_2d\" | \"mouse_click\" | \"mouse_wheel\" | \"mouse_axis\";\r\n\r\nexport interface Input {\r\n    getType(): InputType;\r\n}\r\n\r\nexport class KeyboardKey implements Input {\r\n    /**\r\n     *\r\n     * @param keyCode https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values\r\n     * @param type\r\n     */\r\n    constructor(public keyCode: string, public type: \"keyup\" | \"keydown\" | \"any\" = \"any\") {\r\n\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"keyboard\";\r\n    }\r\n}\r\n\r\nexport class MouseButton implements Input {\r\n    constructor(\r\n        public btn: \"Mouse-0\" | \"Mouse-1\" | \"Mouse-2\" | \"Mouse-3\" | \"Mouse-4\" = \"Mouse-0\",\r\n        public type: \"mousedown\" | \"mouseup\" | \"any\" = \"any\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_click\";\r\n    }\r\n}\r\n\r\nexport class MouseWheel implements Input {\r\n    constructor(public type: \"up\" | \"down\" | \"any\" = \"any\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_wheel\";\r\n    }\r\n}\r\n\r\nexport class MouseAxis implements Input {\r\n    constructor(public type: \"x\" | \"y\" = \"x\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_axis\";\r\n    }\r\n}\r\n\r\nexport class Compound1DInput implements Input {\r\n    constructor(public eventXPositive: string, public eventXNegative: string) {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"compound_1d\";\r\n    }\r\n\r\n}\r\n\r\nexport class Compound2DInput implements Input {\r\n    constructor(public eventX: string, public eventY: string) {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"compound_2d\";\r\n    }\r\n\r\n}\r\n\r\n/*\r\nEvent kind\r\n */\r\n\r\nexport interface BooleanEvent {\r\n    actionName: string,\r\n    state: boolean,\r\n    sourceEvt: any\r\n}\r\n\r\nexport interface ScalarEvent {\r\n    actionName: string,\r\n    state: number,\r\n    sourceEvt: any\r\n}\r\n\r\nexport interface Scalar2DEvent {\r\n    actionName: string,\r\n    state: { x: number, y: number },\r\n    sourceEvt: any\r\n}\r\n\r\n\r\nclass MouseManager {\r\n    setupListeners(el: HTMLElement) {\r\n\r\n        el.addEventListener('mousedown', (evt) => {\r\n            this.checkMouseEvent(evt, \"mousedown\");\r\n        });\r\n        el.addEventListener('mouseup', (evt) => {\r\n            this.checkMouseEvent(evt, \"mouseup\");\r\n        });\r\n        el.addEventListener('mouseout', (evt) => {\r\n            this.checkMouseEvent(evt, \"mouseup\");\r\n        });\r\n        el.addEventListener(\"mousemove\", (evt) => {\r\n            for (const action in this.parent.inputList) {\r\n                for (const keyListElementElement of this.parent.inputList[action]) {\r\n                    if (keyListElementElement.getType() === \"mouse_axis\") {\r\n                        let input = keyListElementElement as MouseAxis;\r\n                        if (input.type === \"x\") {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.offsetX,\r\n                            });\r\n                        }\r\n                        if (input.type === \"y\") {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.offsetY,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        el.addEventListener(\"wheel\", (evt: any) => {\r\n            for (const action in this.parent.inputList) {\r\n                for (const keyListElementElement of this.parent.inputList[action]) {\r\n                    if (keyListElementElement.getType() === \"mouse_wheel\") {\r\n                        let input = keyListElementElement as MouseWheel;\r\n                        if (input.type === \"up\") {\r\n                            throw new Error(\"not yet implemented\");\r\n                        }\r\n                        if (input.type === \"down\") {\r\n                            throw new Error(\"not yet implemented\");\r\n                        }\r\n                        this.parent.notifyScalar(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: evt.deltaY,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: InputService) {\r\n\r\n    }\r\n\r\n    private checkMouseEvent(evt: MouseEvent, state: string) {\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n        let key = \"Mouse-\" + evt.button;\r\n        for (const action in this.parent.inputList) {\r\n            for (const keyListElementElement of this.parent.inputList[action]) {\r\n                if (keyListElementElement.getType() === \"mouse_click\") {\r\n                    let input = keyListElementElement as MouseButton;\r\n                    if (input.btn == key && (state === input.type || input.type === \"any\")) {\r\n                        this.parent.notifyBoolean(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: state === \"mousedown\",//mousedown = true, mouseup = false\r\n                        });\r\n                        this.parent.notifyScalar(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: state === \"mousedown\" ? 1.0 : 0.0,//mousedown = 1.0, mouseup = 0.0\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass KeyboardManager {\r\n    setupListeners() {\r\n        // KEY UP LISTENER\r\n        window.addEventListener('keyup', (evt) => {\r\n            this.checkKeyBoardEvent(evt);\r\n        });\r\n        // KEY DOWN LISTENER\r\n        window.addEventListener('keydown', (evt) => {\r\n            this.checkKeyBoardEvent(evt);\r\n        });\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: InputService) {\r\n    }\r\n\r\n    private checkKeyBoardEvent(evt: KeyboardEvent) {\r\n        // check this is not a repeat\r\n        if (evt.repeat == false) {\r\n            // look for event in the key list\r\n            for (const action in this.parent.inputList) {\r\n                for (const keyListElementElement of this.parent.inputList[action]) {\r\n                    if (keyListElementElement.getType() === \"keyboard\") {\r\n                        let input = keyListElementElement as KeyboardKey;\r\n                        if (input.keyCode == evt.code && (evt.type === input.type || input.type === \"any\")) {\r\n                            this.parent.notifyBoolean(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.type === \"keydown\",//keydown = true, keyup = false\r\n                            });\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.type === \"keydown\" ? 1.0 : 0.0,//keydown = 1.0, keyup = 0.0\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass CompoundManager {\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: InputService) {\r\n\r\n    }\r\n\r\n    public notifyActionOn(id: string) {\r\n        // look for event in the key list\r\n        for (const action in this.parent.inputList) {\r\n            for (const keyListElementElement of this.parent.inputList[action]) {\r\n                if (keyListElementElement.getType() === \"compound_1d\") {\r\n                    let input = keyListElementElement as Compound1DInput;\r\n                    if (input.eventXPositive === id || input.eventXNegative === id) {\r\n                        let eventXPos = this.parent.getScalarEvent(input.eventXPositive);\r\n                        let eventXNeg = this.parent.getScalarEvent(input.eventXNegative);\r\n                        if (eventXPos && eventXNeg) {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: {eventXPos, eventXNeg},\r\n                                actionName: action,\r\n                                state: eventXPos.state - eventXNeg.state\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                if (keyListElementElement.getType() === \"compound_2d\") {\r\n                    let input = keyListElementElement as Compound2DInput;\r\n                    if (input.eventX === id || input.eventY === id) {\r\n                        let eventX = this.parent.getScalarEvent(input.eventX);\r\n                        let eventY = this.parent.getScalarEvent(input.eventY);\r\n                        if (eventX && eventY) {\r\n                            this.parent.notify2DScalar(action, {\r\n                                sourceEvt: {eventX, eventY},\r\n                                actionName: action,\r\n                                state: {\r\n                                    x: eventX.state,\r\n                                    y: eventY.state,\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class InputService {\r\n    public inputList: { [id: string]: Input[] } = {};\r\n\r\n    private booleanCallbackList: { [id: string]: ((event: BooleanEvent) => void)[] } = {};\r\n    private scalarCallbackList: { [id: string]: ((event: ScalarEvent) => void)[] } = {};\r\n    private scalar2DCallbackList: { [id: string]: ((event: Scalar2DEvent) => void)[] } = {};\r\n\r\n    private booleanState: { [id: string]: BooleanEvent } = {};\r\n    private scalarState: { [id: string]: ScalarEvent } = {};\r\n    private scalar2DState: { [id: string]: Scalar2DEvent } = {};\r\n\r\n    private compoundManager: CompoundManager;\r\n    private keyboardManager: KeyboardManager;\r\n    private mouseManager: MouseManager;\r\n\r\n    constructor() {\r\n        this.keyboardManager = new KeyboardManager(this);\r\n        this.mouseManager = new MouseManager(this);\r\n        this.compoundManager = new CompoundManager(this);\r\n    }\r\n\r\n    public initializeCaptureElement(el: HTMLElement = null) {\r\n        if (!el) {\r\n            el = window.document.body;\r\n        }\r\n        this.keyboardManager.setupListeners();\r\n        this.mouseManager.setupListeners(el);\r\n    }\r\n\r\n    notifyScalar(id: string, event: ScalarEvent) {\r\n        // We have found the action : find it in the callback list\r\n        this.scalarState[id] = event;\r\n        if (this.scalarCallbackList[id]) {\r\n            for (const scalarCallback of this.scalarCallbackList[id]) {\r\n                scalarCallback(event);\r\n            }\r\n        }\r\n        this.compoundManager.notifyActionOn(id);\r\n    }\r\n\r\n    notify2DScalar(id: string, event: Scalar2DEvent) {\r\n        // We have found the action : find it in the callback list\r\n        this.scalar2DState[id] = event;\r\n        if (this.scalarCallbackList[id]) {\r\n            for (const scalarCallback of this.scalar2DCallbackList[id]) {\r\n                scalarCallback(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    notifyBoolean(id: string, event: BooleanEvent) {\r\n        // We have found the action : find it in the callback list\r\n        if(this.booleanState[id]?(this.booleanState[id].state != event.state):true) {//only notify on state change\r\n            this.booleanState[id] = event;\r\n            if (this.booleanCallbackList[id]) {\r\n                for (const boolCallBack of this.booleanCallbackList[id]) {\r\n                    boolCallBack(event);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public register(actionName: string, inputObject: Input) {\r\n        if (!this.inputList[actionName]) {\r\n            this.inputList[actionName] = []\r\n        }\r\n        this.inputList[actionName].push(inputObject);\r\n    }\r\n\r\n    public setBooleanValue(actionName: string, state: boolean) {\r\n        this.booleanState[actionName].state;\r\n        this.notifyBoolean(actionName, {\r\n            state,\r\n            actionName,\r\n            sourceEvt: null,\r\n        })\r\n    }\r\n\r\n    public getBooleanValue(actionName: string): boolean {\r\n        if (this.booleanState[actionName]) {\r\n            return this.booleanState[actionName].state;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getScalarValue(actionName: string): number {\r\n        if (this.scalarState[actionName]) {\r\n            return this.scalarState[actionName].state;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public getScalar2DValue(actionName: string): { x: number, y: number } {\r\n        if (this.scalar2DState[actionName]) {\r\n            return this.scalar2DState[actionName].state;\r\n        } else {\r\n            return {x: 0, y: 0};\r\n        }\r\n    }\r\n\r\n    public getBooleanEvent(actionName: string): BooleanEvent {\r\n        return this.booleanState[actionName];\r\n    }\r\n\r\n    public getScalarEvent(actionName: string): ScalarEvent {\r\n        return this.scalarState[actionName];\r\n    }\r\n\r\n    public getScalar2DEvent(actionName: string): Scalar2DEvent {\r\n        return this.scalar2DState[actionName];\r\n    }\r\n\r\n    public register2DScalarEvent(actionName: string, callback: (event: Scalar2DEvent) => void) {\r\n        return this.registerGeneric<Scalar2DEvent>(this.scalar2DCallbackList,actionName,callback);\r\n    }\r\n\r\n    public registerScalarEvent(actionName: string, callback: (event: ScalarEvent) => void) {\r\n        return this.registerGeneric<ScalarEvent>(this.scalarCallbackList,actionName,callback);\r\n    }\r\n\r\n    public registerBooleanEvent(actionName: string, callback: (event: BooleanEvent) => void): () => void {\r\n        return this.registerGeneric<BooleanEvent>(this.booleanCallbackList,actionName,callback);\r\n    }\r\n\r\n    private registerGeneric<T>(list: { [id: string]: ((event: T) => void)[] }, actionName: string, callback: (event: T) => void): () => void {\r\n        // Check the action name callback is already registered\r\n        if (!list[actionName]) {\r\n            list[actionName] = [];\r\n        }\r\n        list[actionName].push(callback);\r\n        return () => {\r\n            list[actionName].filter(value => {\r\n                return value != callback;\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n"],"mappings":"AACA,OAAQ,mBAAAA,MAAkC,YCDnC,IAAMC,EAAmB,OAAO,IAAI,kBAAkB,ECMtD,IAAMC,EAAN,KAAmC,CAMtC,YAAmBC,EAAwBC,EAAoC,MAAO,CAAnE,aAAAD,EAAwB,UAAAC,CAE3C,CAEA,SAAqB,CACjB,MAAO,UACX,CACJ,EAEaC,EAAN,KAAmC,CACtC,YACWC,EAAiE,UACjEF,EAAwC,MAAO,CAD/C,SAAAE,EACA,UAAAF,CACX,CAEA,SAAqB,CACjB,MAAO,aACX,CACJ,EAEaG,EAAN,KAAkC,CACrC,YAAmBH,EAA8B,MAAO,CAArC,UAAAA,CACnB,CAEA,SAAqB,CACjB,MAAO,aACX,CACJ,EAEaI,EAAN,KAAiC,CACpC,YAAmBJ,EAAkB,IAAK,CAAvB,UAAAA,CACnB,CAEA,SAAqB,CACjB,MAAO,YACX,CACJ,EAEaK,EAAN,KAAuC,CAC1C,YAAmBC,EAA+BC,EAAwB,CAAvD,oBAAAD,EAA+B,oBAAAC,CAClD,CAEA,SAAqB,CACjB,MAAO,aACX,CAEJ,EAEaC,EAAN,KAAuC,CAC1C,YAAmBC,EAAuBC,EAAgB,CAAvC,YAAAD,EAAuB,YAAAC,CAC1C,CAEA,SAAqB,CACjB,MAAO,aACX,CAEJ,EAyBMC,EAAN,KAAmB,CA0DR,YAAoBC,EAAsB,CAAtB,YAAAA,CAE3B,CA3DA,eAAeC,EAAiB,CAE5BA,EAAG,iBAAiB,YAAcC,GAAQ,CACtC,KAAK,gBAAgBA,EAAK,WAAW,CACzC,CAAC,EACDD,EAAG,iBAAiB,UAAYC,GAAQ,CACpC,KAAK,gBAAgBA,EAAK,SAAS,CACvC,CAAC,EACDD,EAAG,iBAAiB,WAAaC,GAAQ,CACrC,KAAK,gBAAgBA,EAAK,SAAS,CACvC,CAAC,EACDD,EAAG,iBAAiB,YAAcC,GAAQ,CACtC,QAAWC,KAAU,KAAK,OAAO,UAC7B,QAAWC,KAAyB,KAAK,OAAO,UAAUD,CAAM,EAC5D,GAAIC,EAAsB,QAAQ,IAAM,aAAc,CAClD,IAAIC,EAAQD,EACRC,EAAM,OAAS,KACf,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OACf,CAAC,EAEDG,EAAM,OAAS,KACf,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OACf,CAAC,EAKrB,CAAC,EACDD,EAAG,iBAAiB,QAAUC,GAAa,CACvC,QAAWC,KAAU,KAAK,OAAO,UAC7B,QAAWC,KAAyB,KAAK,OAAO,UAAUD,CAAM,EAC5D,GAAIC,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,OAAS,KACf,MAAM,IAAI,MAAM,qBAAqB,EAEzC,GAAIA,EAAM,OAAS,OACf,MAAM,IAAI,MAAM,qBAAqB,EAEzC,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,MACf,CAAC,EAIjB,CAAC,CACL,CAOQ,gBAAgBA,EAAiBI,EAAe,CAEpD,IAAIC,EAAM,SAAWL,EAAI,OACzB,QAAWC,KAAU,KAAK,OAAO,UAC7B,QAAWC,KAAyB,KAAK,OAAO,UAAUD,CAAM,EAC5D,GAAIC,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACRC,EAAM,KAAOE,IAAQD,IAAUD,EAAM,MAAQA,EAAM,OAAS,SAC5D,KAAK,OAAO,cAAcF,EAAQ,CAC9B,UAAWD,EACX,WAAYC,EACZ,MAAOG,IAAU,WACrB,CAAC,EACD,KAAK,OAAO,aAAaH,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOG,IAAU,YAAc,EAAM,CACzC,CAAC,GAKrB,CACJ,EAEME,EAAN,KAAsB,CAaX,YAAoBR,EAAsB,CAAtB,YAAAA,CAC3B,CAbA,gBAAiB,CAEb,OAAO,iBAAiB,QAAUE,GAAQ,CACtC,KAAK,mBAAmBA,CAAG,CAC/B,CAAC,EAED,OAAO,iBAAiB,UAAYA,GAAQ,CACxC,KAAK,mBAAmBA,CAAG,CAC/B,CAAC,CACL,CAMQ,mBAAmBA,EAAoB,CAE3C,GAAIA,EAAI,QAAU,IAEd,QAAWC,KAAU,KAAK,OAAO,UAC7B,QAAWC,KAAyB,KAAK,OAAO,UAAUD,CAAM,EAC5D,GAAIC,EAAsB,QAAQ,IAAM,WAAY,CAChD,IAAIC,EAAQD,EACRC,EAAM,SAAWH,EAAI,OAASA,EAAI,OAASG,EAAM,MAAQA,EAAM,OAAS,SACxE,KAAK,OAAO,cAAcF,EAAQ,CAC9B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OAAS,SACxB,CAAC,EACD,KAAK,OAAO,aAAaC,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OAAS,UAAY,EAAM,CAC1C,CAAC,IAMzB,CAEJ,EAEMO,EAAN,KAAsB,CAEX,YAAoBT,EAAsB,CAAtB,YAAAA,CAE3B,CAEO,eAAeU,EAAY,CAE9B,QAAWP,KAAU,KAAK,OAAO,UAC7B,QAAWC,KAAyB,KAAK,OAAO,UAAUD,CAAM,EAAG,CAC/D,GAAIC,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,iBAAmBK,GAAML,EAAM,iBAAmBK,EAAI,CAC5D,IAAIC,EAAY,KAAK,OAAO,eAAeN,EAAM,cAAc,EAC3DO,EAAY,KAAK,OAAO,eAAeP,EAAM,cAAc,EAC3DM,GAAaC,GACb,KAAK,OAAO,aAAaT,EAAQ,CAC7B,UAAW,CAAC,UAAAQ,EAAW,UAAAC,CAAS,EAChC,WAAYT,EACZ,MAAOQ,EAAU,MAAQC,EAAU,KACvC,CAAC,GAIb,GAAIR,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,SAAWK,GAAML,EAAM,SAAWK,EAAI,CAC5C,IAAIb,EAAS,KAAK,OAAO,eAAeQ,EAAM,MAAM,EAChDP,EAAS,KAAK,OAAO,eAAeO,EAAM,MAAM,EAChDR,GAAUC,GACV,KAAK,OAAO,eAAeK,EAAQ,CAC/B,UAAW,CAAC,OAAAN,EAAQ,OAAAC,CAAM,EAC1B,WAAYK,EACZ,MAAO,CACH,EAAGN,EAAO,MACV,EAAGC,EAAO,KACd,CACJ,CAAC,IAMzB,CACJ,EAEae,EAAN,KAAmB,CACf,UAAuC,CAAC,EAEvC,oBAA2E,CAAC,EAC5E,mBAAyE,CAAC,EAC1E,qBAA6E,CAAC,EAE9E,aAA+C,CAAC,EAChD,YAA6C,CAAC,EAC9C,cAAiD,CAAC,EAElD,gBACA,gBACA,aAER,aAAc,CACV,KAAK,gBAAkB,IAAIL,EAAgB,IAAI,EAC/C,KAAK,aAAe,IAAIT,EAAa,IAAI,EACzC,KAAK,gBAAkB,IAAIU,EAAgB,IAAI,CACnD,CAEO,yBAAyBR,EAAkB,KAAM,CAC/CA,IACDA,EAAK,OAAO,SAAS,MAEzB,KAAK,gBAAgB,eAAe,EACpC,KAAK,aAAa,eAAeA,CAAE,CACvC,CAEA,aAAaS,EAAYI,EAAoB,CAGzC,GADA,KAAK,YAAYJ,CAAE,EAAII,EACnB,KAAK,mBAAmBJ,CAAE,EAC1B,QAAWK,KAAkB,KAAK,mBAAmBL,CAAE,EACnDK,EAAeD,CAAK,EAG5B,KAAK,gBAAgB,eAAeJ,CAAE,CAC1C,CAEA,eAAeA,EAAYI,EAAsB,CAG7C,GADA,KAAK,cAAcJ,CAAE,EAAII,EACrB,KAAK,mBAAmBJ,CAAE,EAC1B,QAAWK,KAAkB,KAAK,qBAAqBL,CAAE,EACrDK,EAAeD,CAAK,CAGhC,CAEA,cAAcJ,EAAYI,EAAqB,CAE3C,IAAG,MAAK,aAAaJ,CAAE,GAAG,KAAK,aAAaA,CAAE,EAAE,OAASI,EAAM,SAC3D,KAAK,aAAaJ,CAAE,EAAII,EACpB,KAAK,oBAAoBJ,CAAE,GAC3B,QAAWM,KAAgB,KAAK,oBAAoBN,CAAE,EAClDM,EAAaF,CAAK,CAIlC,CAEO,SAASG,EAAoBC,EAAoB,CAC/C,KAAK,UAAUD,CAAU,IAC1B,KAAK,UAAUA,CAAU,EAAI,CAAC,GAElC,KAAK,UAAUA,CAAU,EAAE,KAAKC,CAAW,CAC/C,CAEO,gBAAgBD,EAAoBX,EAAgB,CACvD,KAAK,aAAaW,CAAU,EAAE,MAC9B,KAAK,cAAcA,EAAY,CAC3B,MAAAX,EACA,WAAAW,EACA,UAAW,IACf,CAAC,CACL,CAEO,gBAAgBA,EAA6B,CAChD,OAAI,KAAK,aAAaA,CAAU,EACrB,KAAK,aAAaA,CAAU,EAAE,MAE9B,EAEf,CAEO,eAAeA,EAA4B,CAC9C,OAAI,KAAK,YAAYA,CAAU,EACpB,KAAK,YAAYA,CAAU,EAAE,MAE7B,CAEf,CAEO,iBAAiBA,EAA8C,CAClE,OAAI,KAAK,cAAcA,CAAU,EACtB,KAAK,cAAcA,CAAU,EAAE,MAE/B,CAAC,EAAG,EAAG,EAAG,CAAC,CAE1B,CAEO,gBAAgBA,EAAkC,CACrD,OAAO,KAAK,aAAaA,CAAU,CACvC,CAEO,eAAeA,EAAiC,CACnD,OAAO,KAAK,YAAYA,CAAU,CACtC,CAEO,iBAAiBA,EAAmC,CACvD,OAAO,KAAK,cAAcA,CAAU,CACxC,CAEO,sBAAsBA,EAAoBE,EAA0C,CACvF,OAAO,KAAK,gBAA+B,KAAK,qBAAqBF,EAAWE,CAAQ,CAC5F,CAEO,oBAAoBF,EAAoBE,EAAwC,CACnF,OAAO,KAAK,gBAA6B,KAAK,mBAAmBF,EAAWE,CAAQ,CACxF,CAEO,qBAAqBF,EAAoBE,EAAqD,CACjG,OAAO,KAAK,gBAA8B,KAAK,oBAAoBF,EAAWE,CAAQ,CAC1F,CAEQ,gBAAmBC,EAAgDH,EAAoBE,EAA0C,CAErI,OAAKC,EAAKH,CAAU,IAChBG,EAAKH,CAAU,EAAI,CAAC,GAExBG,EAAKH,CAAU,EAAE,KAAKE,CAAQ,EACvB,IAAM,CACTC,EAAKH,CAAU,EAAE,OAAOI,GACbA,GAASF,CACnB,CACL,CACJ,CAEJ,EFjZO,IAAMG,EAAN,KAAuC,CAC1C,WAA6B,CACzB,OAAO,IAAIC,EAAiBC,GAA0B,CAClDA,EAAKC,CAAgB,EAAE,eAAe,IAC3B,IAAIC,CACd,EAAE,iBAAiB,CAExB,CAAC,CACL,CAEJ","names":["ContainerModule","InputServiceName","KeyboardKey","keyCode","type","MouseButton","btn","MouseWheel","MouseAxis","Compound1DInput","eventXPositive","eventXNegative","Compound2DInput","eventX","eventY","MouseManager","parent","el","evt","action","keyListElementElement","input","state","key","KeyboardManager","CompoundManager","id","eventXPos","eventXNeg","InputService","event","scalarCallback","boolCallBack","actionName","inputObject","callback","list","value","AxInputModule","ContainerModule","bind","InputServiceName","InputService"]}