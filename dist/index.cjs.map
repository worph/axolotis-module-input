{"version":3,"sources":["../src/index.ts","../src/Identifier.ts","../src/services/manager/CompoundManager.ts","../src/services/manager/KeyboardManager.ts","../src/services/manager/MouseManager.ts","../src/services/input/InputService.ts","../src/services/events/Compound.ts","../src/services/events/KeyboardKey.ts","../src/services/events/MouseButton.ts","../src/services/events/MouseWheel.ts","../src/services/events/MouseAxis.ts"],"sourcesContent":["import {AxModule} from \"axolotis-module-definition\";\r\nimport {ContainerModule, interfaces} from \"inversify\";\r\nimport {InputServiceName} from \"./Identifier\";\r\nimport {InputService} from \"./services/input/InputService\";\r\nexport * from \"./services/input/InputService\";\r\n\r\nexport * from \"./Identifier\";\r\nexport * from \"./services/input/InputService\";\r\nexport * from \"./services/events/Compound\";\r\nexport * from \"./services/events/InputEvent\";\r\nexport * from \"./services/events/KeyboardKey\";\r\nexport * from \"./services/events/MouseButton\";\r\nexport * from \"./services/events/MouseWheel\";\r\nexport * from \"./services/events/MouseAxis\";\r\nexport * from \"./services/manager/CompoundManager\";\r\nexport * from \"./services/manager/KeyboardManager\";\r\nexport * from \"./services/manager/MouseManager\";\r\n\r\nexport class AxInputModule implements AxModule{\r\n    getModule(): ContainerModule {\r\n        return new ContainerModule((bind: interfaces.Bind) => {\r\n            bind(InputServiceName).toDynamicValue(() => {\r\n                return new InputService()\r\n            }).inSingletonScope();\r\n\r\n        });\r\n    }\r\n\r\n}\r\n","export const InputServiceName = Symbol.for(\"InputServiceName\");\r\n","import {Compound1DInput, Compound2DInput} from \"../events/Compound\";\r\nimport {Notifier} from \"./Notifier\";\r\n\r\nexport class CompoundManager {\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: Notifier) {\r\n\r\n    }\r\n\r\n    public notifyActionOn(id: string) {\r\n        // look for event in the key list\r\n        for (const action in this.parent.getActionList()) {\r\n            for (const keyListElementElement of this.parent.getActionList()[action]) {\r\n                if (keyListElementElement.getType() === \"compound_1d\") {\r\n                    let input = keyListElementElement as Compound1DInput;\r\n                    if (input.eventXPositive === id || input.eventXNegative === id) {\r\n                        let eventXPos = this.parent.getScalarEvent(input.eventXPositive);\r\n                        let eventXNeg = this.parent.getScalarEvent(input.eventXNegative);\r\n                        if (eventXPos && eventXNeg) {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: {eventXPos, eventXNeg},\r\n                                actionName: action,\r\n                                state: eventXPos.state - eventXNeg.state\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                if (keyListElementElement.getType() === \"compound_2d\") {\r\n                    let input = keyListElementElement as Compound2DInput;\r\n                    if (input.eventX === id || input.eventY === id) {\r\n                        let eventX = this.parent.getScalarEvent(input.eventX);\r\n                        let eventY = this.parent.getScalarEvent(input.eventY);\r\n                        if (eventX && eventY) {\r\n                            this.parent.notify2DScalar(action, {\r\n                                sourceEvt: {eventX, eventY},\r\n                                actionName: action,\r\n                                state: {\r\n                                    x: eventX.state,\r\n                                    y: eventY.state,\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {KeyboardKey} from \"../events/KeyboardKey\";\r\nimport {InputService} from \"../input/InputService\";\r\nimport {Notifier} from \"./Notifier\";\r\n\r\nexport class KeyboardManager {\r\n    setupListeners() {\r\n        // KEY UP LISTENER\r\n        window.addEventListener('keyup', (evt) => {\r\n            this.checkKeyBoardEvent(evt);\r\n        });\r\n        // KEY DOWN LISTENER\r\n        window.addEventListener('keydown', (evt) => {\r\n            this.checkKeyBoardEvent(evt);\r\n        });\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: Notifier) {\r\n    }\r\n\r\n    private checkKeyBoardEvent(evt: KeyboardEvent) {\r\n        // check this is not a repeat\r\n        if (evt.repeat == false) {\r\n            // look for event in the key list\r\n            for (const action in this.parent.getActionList()) {\r\n                for (const keyListElementElement of this.parent.getActionList()[action]) {\r\n                    if (keyListElementElement.getType() === \"keyboard\") {\r\n                        let input = keyListElementElement as KeyboardKey;\r\n                        if (input.keyCode == evt.code) {\r\n                            this.parent.notifyBoolean(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.type === \"keydown\",//keydown = true, keyup = false\r\n                            });\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.type === \"keydown\" ? 1.0 : 0.0,//keydown = 1.0, keyup = 0.0\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import {MouseAxis} from \"../events/MouseAxis\";\r\nimport {MouseButton} from \"../events/MouseButton\";\r\nimport {MouseWheel} from \"../events/MouseWheel\";\r\nimport {Notifier} from \"./Notifier\";\r\n\r\nexport class MouseManager {\r\n    setupListeners(el: HTMLElement) {\r\n\r\n        el.addEventListener('mousedown', (evt) => {\r\n            this.checkMouseEvent(evt, \"mousedown\");\r\n        });\r\n        el.addEventListener('mouseup', (evt) => {\r\n            this.checkMouseEvent(evt, \"mouseup\");\r\n        });\r\n        el.addEventListener('mouseout', (evt) => {\r\n            this.checkMouseEvent(evt, \"mouseup\");\r\n        });\r\n        el.addEventListener(\"mousemove\", (evt) => {\r\n            for (const action in this.parent.getActionList()) {\r\n                for (const keyListElementElement of this.parent.getActionList()[action]) {\r\n                    if (keyListElementElement.getType() === \"mouse_axis\") {\r\n                        let input = keyListElementElement as MouseAxis;\r\n                        if (input.type === \"x\") {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.offsetX,\r\n                            });\r\n                        }\r\n                        if (input.type === \"y\") {\r\n                            this.parent.notifyScalar(action, {\r\n                                sourceEvt: evt,\r\n                                actionName: action,\r\n                                state: evt.offsetY,\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        el.addEventListener(\"wheel\", (evt: any) => {\r\n            for (const action in this.parent.getActionList()) {\r\n                for (const keyListElementElement of this.parent.getActionList()[action]) {\r\n                    if (keyListElementElement.getType() === \"mouse_wheel\") {\r\n                        let input = keyListElementElement as MouseWheel;\r\n                        if (input.type === \"up\") {\r\n                            throw new Error(\"not yet implemented\");\r\n                        }\r\n                        if (input.type === \"down\") {\r\n                            throw new Error(\"not yet implemented\");\r\n                        }\r\n                        this.parent.notifyScalar(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: evt.deltaY,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n    public constructor(private parent: Notifier) {\r\n\r\n    }\r\n\r\n    private checkMouseEvent(evt: MouseEvent, state: string) {\r\n        //https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\r\n        let key = \"Mouse-\" + evt.button;\r\n        for (const action in this.parent.getActionList()) {\r\n            for (const keyListElementElement of this.parent.getActionList()[action]) {\r\n                if (keyListElementElement.getType() === \"mouse_click\") {\r\n                    let input = keyListElementElement as MouseButton;\r\n                    if (input.btn == key) {\r\n                        this.parent.notifyBoolean(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: state === \"mousedown\",//mousedown = true, mouseup = false\r\n                        });\r\n                        this.parent.notifyScalar(action, {\r\n                            sourceEvt: evt,\r\n                            actionName: action,\r\n                            state: state === \"mousedown\" ? 1.0 : 0.0,//mousedown = 1.0, mouseup = 0.0\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {BooleanEvent, Input, Scalar2DEvent, ScalarEvent} from \"../events/InputEvent\";\r\nimport {CompoundManager} from \"../manager/CompoundManager\";\r\nimport {KeyboardManager} from \"../manager/KeyboardManager\";\r\nimport {MouseManager} from \"../manager/MouseManager\";\r\nimport {Notifier} from \"../manager/Notifier\";\r\n\r\nexport type RaiseType = \"UP\" | \"DOWN\" | \"ANY\";\r\n\r\nexport class InputService implements Notifier {\r\n    public inputList: Record<string, Input[]> = {};\r\n\r\n    private booleanCallbackList: Record<string,\r\n        {\r\n            type: RaiseType,\r\n            callback: ((event: BooleanEvent) => void)\r\n        }[]\r\n    > = {};\r\n    private scalarCallbackList: Record<string, ((event: ScalarEvent) => void)[]> = {};\r\n    private scalar2DCallbackList: Record<string, ((event: Scalar2DEvent) => void)[]> = {};\r\n\r\n    private booleanState: Record<string, BooleanEvent> = {};\r\n    private scalarState: Record<string, ScalarEvent> = {};\r\n    private scalar2DState: Record<string, Scalar2DEvent> = {};\r\n\r\n    private compoundManager: CompoundManager;\r\n    private keyboardManager: KeyboardManager;\r\n    private mouseManager: MouseManager;\r\n\r\n    constructor() {\r\n        this.keyboardManager = new KeyboardManager(this);\r\n        this.mouseManager = new MouseManager(this);\r\n        this.compoundManager = new CompoundManager(this);\r\n    }\r\n\r\n    public initializeCaptureElement(el: HTMLElement = null) {\r\n        if (!el) {\r\n            el = window.document.body;\r\n        }\r\n        this.keyboardManager.setupListeners();\r\n        this.mouseManager.setupListeners(el);\r\n    }\r\n\r\n    notifyScalar(id: string, event: ScalarEvent) {\r\n        // We have found the action : find it in the callback list\r\n        this.scalarState[id] = event;\r\n        if (this.scalarCallbackList[id]) {\r\n            for (const scalarCallback of this.scalarCallbackList[id]) {\r\n                scalarCallback(event);\r\n            }\r\n        }\r\n        this.compoundManager.notifyActionOn(id);\r\n    }\r\n\r\n    notify2DScalar(id: string, event: Scalar2DEvent) {\r\n        // We have found the action : find it in the callback list\r\n        this.scalar2DState[id] = event;\r\n        if (this.scalarCallbackList[id]) {\r\n            for (const scalarCallback of this.scalar2DCallbackList[id]) {\r\n                scalarCallback(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    notifyBoolean(id: string, event: BooleanEvent) {\r\n        // We have found the action : find it in the callback list\r\n        if (this.booleanCallbackList[id]) {\r\n            //mouseOutEvent can produce a up event when the state is up already so we have to filter this case\r\n            if (this.booleanState[id] ? (this.booleanState[id].state !== event.state) : event.state) {\r\n                for (const boolCallBack of this.booleanCallbackList[id]) {\r\n                    if (event.sourceEvt.type === \"keyup\" && boolCallBack.type === \"UP\") {\r\n                        boolCallBack.callback(event);\r\n                    } else if (event.sourceEvt.type === \"keydown\" && boolCallBack.type === \"DOWN\") {\r\n                        boolCallBack.callback(event);\r\n                    } else if (boolCallBack.type === \"ANY\") {\r\n                        boolCallBack.callback(event);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //update the state after the check for state change\r\n        this.booleanState[id] = event;\r\n    }\r\n\r\n    public register(actionName: string, inputObject: Input) {\r\n        if (!this.inputList[actionName]) {\r\n            this.inputList[actionName] = []\r\n        }\r\n        this.inputList[actionName].push(inputObject);\r\n    }\r\n\r\n    public setBooleanValue(actionName: string, state: boolean) {\r\n        this.booleanState[actionName].state;\r\n        this.notifyBoolean(actionName, {\r\n            state,\r\n            actionName,\r\n            sourceEvt: null,\r\n        })\r\n    }\r\n\r\n    public getBooleanValue(actionName: string): boolean {\r\n        if (this.booleanState[actionName]) {\r\n            return this.booleanState[actionName].state;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getScalarValue(actionName: string): number {\r\n        if (this.scalarState[actionName]) {\r\n            return this.scalarState[actionName].state;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public getScalar2DValue(actionName: string): { x: number, y: number } {\r\n        if (this.scalar2DState[actionName]) {\r\n            return this.scalar2DState[actionName].state;\r\n        } else {\r\n            return {x: 0, y: 0};\r\n        }\r\n    }\r\n\r\n    public getBooleanEvent(actionName: string): BooleanEvent {\r\n        return this.booleanState[actionName];\r\n    }\r\n\r\n    public getScalarEvent(actionName: string): ScalarEvent {\r\n        return this.scalarState[actionName];\r\n    }\r\n\r\n    public getScalar2DEvent(actionName: string): Scalar2DEvent {\r\n        return this.scalar2DState[actionName];\r\n    }\r\n\r\n    public register2DScalarEvent(actionName: string, callback: (event: Scalar2DEvent) => void) {\r\n        return this.registerGeneric<Scalar2DEvent>(this.scalar2DCallbackList, actionName, callback);\r\n    }\r\n\r\n    public registerScalarEvent(actionName: string, callback: (event: ScalarEvent) => void) {\r\n        return this.registerGeneric<ScalarEvent>(this.scalarCallbackList, actionName, callback);\r\n    }\r\n\r\n    public registerBooleanEvent(actionName: string, callback: (event: BooleanEvent) => void, type: RaiseType = \"ANY\"): () => void {\r\n        let list = this.booleanCallbackList;\r\n        let data = {callback, type};\r\n        // Check the action name callback is already registered\r\n        if (!list[actionName]) {\r\n            list[actionName] = [];\r\n        }\r\n        list[actionName].push(data);\r\n        return () => {\r\n            list[actionName].filter(value => {\r\n                return value != data;\r\n            })\r\n        }\r\n    }\r\n\r\n    private registerGeneric<T>(list: {\r\n        [id: string]: ((event: T) => void)[]\r\n    }, actionName: string, callback: (event: T) => void): () => void {\r\n        // Check the action name callback is already registered\r\n        if (!list[actionName]) {\r\n            list[actionName] = [];\r\n        }\r\n        list[actionName].push(callback);\r\n        return () => {\r\n            list[actionName].filter(value => {\r\n                return value != callback;\r\n            })\r\n        }\r\n    }\r\n\r\n    getActionList(): { [key: string]: Input[] } {\r\n        return this.inputList;\r\n    }\r\n\r\n}\r\n","import {Input, InputType} from \"./InputEvent\";\r\n\r\nexport class Compound1DInput implements Input {\r\n    constructor(public eventXPositive: string, public eventXNegative: string) {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"compound_1d\";\r\n    }\r\n\r\n}\r\n\r\nexport class Compound2DInput implements Input {\r\n    constructor(public eventX: string, public eventY: string) {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"compound_2d\";\r\n    }\r\n\r\n}\r\n","import {Input, InputType} from \"./InputEvent\";\r\n\r\nexport class KeyboardKey implements Input {\r\n    /**\r\n     *\r\n     * @param keyCode https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values\r\n     * @param type\r\n     */\r\n    constructor(public keyCode: string) {\r\n\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"keyboard\";\r\n    }\r\n}\r\n","import {Input, InputType} from \"./InputEvent\";\r\n\r\nexport class MouseButton implements Input {\r\n    constructor(\r\n        public btn: \"Mouse-0\" | \"Mouse-1\" | \"Mouse-2\" | \"Mouse-3\" | \"Mouse-4\" = \"Mouse-0\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_click\";\r\n    }\r\n}\r\n","import {Input, InputType} from \"./InputEvent\";\r\n\r\nexport class MouseWheel implements Input {\r\n    constructor(public type: \"up\" | \"down\" | \"any\" = \"any\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_wheel\";\r\n    }\r\n}\r\n","import {Input, InputType} from \"./InputEvent\";\r\n\r\nexport class MouseAxis implements Input {\r\n    constructor(public type: \"x\" | \"y\" = \"x\") {\r\n    }\r\n\r\n    getType(): InputType {\r\n        return \"mouse_axis\";\r\n    }\r\n}\r\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,EAAA,oBAAAC,EAAA,oBAAAC,EAAA,oBAAAC,EAAA,iBAAAC,EAAA,qBAAAC,EAAA,gBAAAC,EAAA,oBAAAC,EAAA,cAAAC,EAAA,gBAAAC,EAAA,iBAAAC,EAAA,eAAAC,IAAA,eAAAC,EAAAd,GACA,IAAAe,EAA0C,qBCDnC,IAAMC,EAAmB,OAAO,IAAI,kBAAkB,ECGtD,IAAMC,EAAN,KAAsB,CAElB,YAAoBC,EAAkB,CAAlB,YAAAA,CAE3B,CAEO,eAAeC,EAAY,CAE9B,QAAWC,KAAU,KAAK,OAAO,cAAc,EAC3C,QAAWC,KAAyB,KAAK,OAAO,cAAc,EAAED,CAAM,EAAG,CACrE,GAAIC,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,iBAAmBH,GAAMG,EAAM,iBAAmBH,EAAI,CAC5D,IAAII,EAAY,KAAK,OAAO,eAAeD,EAAM,cAAc,EAC3DE,EAAY,KAAK,OAAO,eAAeF,EAAM,cAAc,EAC3DC,GAAaC,GACb,KAAK,OAAO,aAAaJ,EAAQ,CAC7B,UAAW,CAAC,UAAAG,EAAW,UAAAC,CAAS,EAChC,WAAYJ,EACZ,MAAOG,EAAU,MAAQC,EAAU,KACvC,CAAC,GAIb,GAAIH,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,SAAWH,GAAMG,EAAM,SAAWH,EAAI,CAC5C,IAAIM,EAAS,KAAK,OAAO,eAAeH,EAAM,MAAM,EAChDI,EAAS,KAAK,OAAO,eAAeJ,EAAM,MAAM,EAChDG,GAAUC,GACV,KAAK,OAAO,eAAeN,EAAQ,CAC/B,UAAW,CAAC,OAAAK,EAAQ,OAAAC,CAAM,EAC1B,WAAYN,EACZ,MAAO,CACH,EAAGK,EAAO,MACV,EAAGC,EAAO,KACd,CACJ,CAAC,IAMzB,CACJ,EC3CO,IAAMC,EAAN,KAAsB,CAalB,YAAoBC,EAAkB,CAAlB,YAAAA,CAC3B,CAbA,gBAAiB,CAEb,OAAO,iBAAiB,QAAUC,GAAQ,CACtC,KAAK,mBAAmBA,CAAG,CAC/B,CAAC,EAED,OAAO,iBAAiB,UAAYA,GAAQ,CACxC,KAAK,mBAAmBA,CAAG,CAC/B,CAAC,CACL,CAMQ,mBAAmBA,EAAoB,CAE3C,GAAIA,EAAI,QAAU,GAEd,QAAWC,KAAU,KAAK,OAAO,cAAc,EAC3C,QAAWC,KAAyB,KAAK,OAAO,cAAc,EAAED,CAAM,EAC9DC,EAAsB,QAAQ,IAAM,YACxBA,EACF,SAAWF,EAAI,OACrB,KAAK,OAAO,cAAcC,EAAQ,CAC9B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OAAS,SACxB,CAAC,EACD,KAAK,OAAO,aAAaC,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OAAS,UAAY,EAAM,CAC1C,CAAC,EAMzB,CAEJ,ECzCO,IAAMG,EAAN,KAAmB,CA0Df,YAAoBC,EAAkB,CAAlB,YAAAA,CAE3B,CA3DA,eAAeC,EAAiB,CAE5BA,EAAG,iBAAiB,YAAcC,GAAQ,CACtC,KAAK,gBAAgBA,EAAK,WAAW,CACzC,CAAC,EACDD,EAAG,iBAAiB,UAAYC,GAAQ,CACpC,KAAK,gBAAgBA,EAAK,SAAS,CACvC,CAAC,EACDD,EAAG,iBAAiB,WAAaC,GAAQ,CACrC,KAAK,gBAAgBA,EAAK,SAAS,CACvC,CAAC,EACDD,EAAG,iBAAiB,YAAcC,GAAQ,CACtC,QAAWC,KAAU,KAAK,OAAO,cAAc,EAC3C,QAAWC,KAAyB,KAAK,OAAO,cAAc,EAAED,CAAM,EAClE,GAAIC,EAAsB,QAAQ,IAAM,aAAc,CAClD,IAAIC,EAAQD,EACRC,EAAM,OAAS,KACf,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OACf,CAAC,EAEDG,EAAM,OAAS,KACf,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,OACf,CAAC,EAKrB,CAAC,EACDD,EAAG,iBAAiB,QAAUC,GAAa,CACvC,QAAWC,KAAU,KAAK,OAAO,cAAc,EAC3C,QAAWC,KAAyB,KAAK,OAAO,cAAc,EAAED,CAAM,EAClE,GAAIC,EAAsB,QAAQ,IAAM,cAAe,CACnD,IAAIC,EAAQD,EACZ,GAAIC,EAAM,OAAS,KACf,MAAM,IAAI,MAAM,qBAAqB,EAEzC,GAAIA,EAAM,OAAS,OACf,MAAM,IAAI,MAAM,qBAAqB,EAEzC,KAAK,OAAO,aAAaF,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOD,EAAI,MACf,CAAC,EAIjB,CAAC,CACL,CAOQ,gBAAgBA,EAAiBI,EAAe,CAEpD,IAAIC,EAAM,SAAWL,EAAI,OACzB,QAAWC,KAAU,KAAK,OAAO,cAAc,EAC3C,QAAWC,KAAyB,KAAK,OAAO,cAAc,EAAED,CAAM,EAC9DC,EAAsB,QAAQ,IAAM,eACxBA,EACF,KAAOG,IACb,KAAK,OAAO,cAAcJ,EAAQ,CAC9B,UAAWD,EACX,WAAYC,EACZ,MAAOG,IAAU,WACrB,CAAC,EACD,KAAK,OAAO,aAAaH,EAAQ,CAC7B,UAAWD,EACX,WAAYC,EACZ,MAAOG,IAAU,YAAc,EAAM,CACzC,CAAC,EAKrB,CACJ,EClFO,IAAME,EAAN,KAAuC,CACnC,UAAqC,CAAC,EAErC,oBAKJ,CAAC,EACG,mBAAuE,CAAC,EACxE,qBAA2E,CAAC,EAE5E,aAA6C,CAAC,EAC9C,YAA2C,CAAC,EAC5C,cAA+C,CAAC,EAEhD,gBACA,gBACA,aAER,aAAc,CACV,KAAK,gBAAkB,IAAIC,EAAgB,IAAI,EAC/C,KAAK,aAAe,IAAIC,EAAa,IAAI,EACzC,KAAK,gBAAkB,IAAIC,EAAgB,IAAI,CACnD,CAEO,yBAAyBC,EAAkB,KAAM,CAC/CA,IACDA,EAAK,OAAO,SAAS,MAEzB,KAAK,gBAAgB,eAAe,EACpC,KAAK,aAAa,eAAeA,CAAE,CACvC,CAEA,aAAaC,EAAYC,EAAoB,CAGzC,GADA,KAAK,YAAYD,CAAE,EAAIC,EACnB,KAAK,mBAAmBD,CAAE,EAC1B,QAAWE,KAAkB,KAAK,mBAAmBF,CAAE,EACnDE,EAAeD,CAAK,EAG5B,KAAK,gBAAgB,eAAeD,CAAE,CAC1C,CAEA,eAAeA,EAAYC,EAAsB,CAG7C,GADA,KAAK,cAAcD,CAAE,EAAIC,EACrB,KAAK,mBAAmBD,CAAE,EAC1B,QAAWE,KAAkB,KAAK,qBAAqBF,CAAE,EACrDE,EAAeD,CAAK,CAGhC,CAEA,cAAcD,EAAYC,EAAqB,CAE3C,GAAI,KAAK,oBAAoBD,CAAE,IAEvB,KAAK,aAAaA,CAAE,EAAK,KAAK,aAAaA,CAAE,EAAE,QAAUC,EAAM,MAASA,EAAM,OAC9E,QAAWE,KAAgB,KAAK,oBAAoBH,CAAE,GAC9CC,EAAM,UAAU,OAAS,SAAWE,EAAa,OAAS,MAEnDF,EAAM,UAAU,OAAS,WAAaE,EAAa,OAAS,QAE5DA,EAAa,OAAS,QAC7BA,EAAa,SAASF,CAAK,EAM3C,KAAK,aAAaD,CAAE,EAAIC,CAC5B,CAEO,SAASG,EAAoBC,EAAoB,CAC/C,KAAK,UAAUD,CAAU,IAC1B,KAAK,UAAUA,CAAU,EAAI,CAAC,GAElC,KAAK,UAAUA,CAAU,EAAE,KAAKC,CAAW,CAC/C,CAEO,gBAAgBD,EAAoBE,EAAgB,CACvD,KAAK,aAAaF,CAAU,EAAE,MAC9B,KAAK,cAAcA,EAAY,CAC3B,MAAAE,EACA,WAAAF,EACA,UAAW,IACf,CAAC,CACL,CAEO,gBAAgBA,EAA6B,CAChD,OAAI,KAAK,aAAaA,CAAU,EACrB,KAAK,aAAaA,CAAU,EAAE,MAE9B,EAEf,CAEO,eAAeA,EAA4B,CAC9C,OAAI,KAAK,YAAYA,CAAU,EACpB,KAAK,YAAYA,CAAU,EAAE,MAE7B,CAEf,CAEO,iBAAiBA,EAA8C,CAClE,OAAI,KAAK,cAAcA,CAAU,EACtB,KAAK,cAAcA,CAAU,EAAE,MAE/B,CAAC,EAAG,EAAG,EAAG,CAAC,CAE1B,CAEO,gBAAgBA,EAAkC,CACrD,OAAO,KAAK,aAAaA,CAAU,CACvC,CAEO,eAAeA,EAAiC,CACnD,OAAO,KAAK,YAAYA,CAAU,CACtC,CAEO,iBAAiBA,EAAmC,CACvD,OAAO,KAAK,cAAcA,CAAU,CACxC,CAEO,sBAAsBA,EAAoBG,EAA0C,CACvF,OAAO,KAAK,gBAA+B,KAAK,qBAAsBH,EAAYG,CAAQ,CAC9F,CAEO,oBAAoBH,EAAoBG,EAAwC,CACnF,OAAO,KAAK,gBAA6B,KAAK,mBAAoBH,EAAYG,CAAQ,CAC1F,CAEO,qBAAqBH,EAAoBG,EAAyCC,EAAkB,MAAmB,CAC1H,IAAIC,EAAO,KAAK,oBACZC,EAAO,CAAC,SAAAH,EAAU,KAAAC,CAAI,EAE1B,OAAKC,EAAKL,CAAU,IAChBK,EAAKL,CAAU,EAAI,CAAC,GAExBK,EAAKL,CAAU,EAAE,KAAKM,CAAI,EACnB,IAAM,CACTD,EAAKL,CAAU,EAAE,OAAOO,GACbA,GAASD,CACnB,CACL,CACJ,CAEQ,gBAAmBD,EAExBL,EAAoBG,EAA0C,CAE7D,OAAKE,EAAKL,CAAU,IAChBK,EAAKL,CAAU,EAAI,CAAC,GAExBK,EAAKL,CAAU,EAAE,KAAKG,CAAQ,EACvB,IAAM,CACTE,EAAKL,CAAU,EAAE,OAAOO,GACbA,GAASJ,CACnB,CACL,CACJ,CAEA,eAA4C,CACxC,OAAO,KAAK,SAChB,CAEJ,EC/KO,IAAMK,EAAN,KAAuC,CAC1C,YAAmBC,EAA+BC,EAAwB,CAAvD,oBAAAD,EAA+B,oBAAAC,CAClD,CAEA,SAAqB,CACjB,MAAO,aACX,CAEJ,EAEaC,EAAN,KAAuC,CAC1C,YAAmBC,EAAuBC,EAAgB,CAAvC,YAAAD,EAAuB,YAAAC,CAC1C,CAEA,SAAqB,CACjB,MAAO,aACX,CAEJ,EClBO,IAAMC,EAAN,KAAmC,CAMtC,YAAmBC,EAAiB,CAAjB,aAAAA,CAEnB,CAEA,SAAqB,CACjB,MAAO,UACX,CACJ,ECbO,IAAMC,EAAN,KAAmC,CACtC,YACWC,EAAiE,UAAW,CAA5E,SAAAA,CACX,CAEA,SAAqB,CACjB,MAAO,aACX,CACJ,ECRO,IAAMC,EAAN,KAAkC,CACrC,YAAmBC,EAA8B,MAAO,CAArC,UAAAA,CACnB,CAEA,SAAqB,CACjB,MAAO,aACX,CACJ,ECPO,IAAMC,EAAN,KAAiC,CACpC,YAAmBC,EAAkB,IAAK,CAAvB,UAAAA,CACnB,CAEA,SAAqB,CACjB,MAAO,YACX,CACJ,EVSO,IAAMC,EAAN,KAAuC,CAC1C,WAA6B,CACzB,OAAO,IAAI,kBAAiBC,GAA0B,CAClDA,EAAKC,CAAgB,EAAE,eAAe,IAC3B,IAAIC,CACd,EAAE,iBAAiB,CAExB,CAAC,CACL,CAEJ","names":["src_exports","__export","AxInputModule","Compound1DInput","Compound2DInput","CompoundManager","InputService","InputServiceName","KeyboardKey","KeyboardManager","MouseAxis","MouseButton","MouseManager","MouseWheel","__toCommonJS","import_inversify","InputServiceName","CompoundManager","parent","id","action","keyListElementElement","input","eventXPos","eventXNeg","eventX","eventY","KeyboardManager","parent","evt","action","keyListElementElement","MouseManager","parent","el","evt","action","keyListElementElement","input","state","key","InputService","KeyboardManager","MouseManager","CompoundManager","el","id","event","scalarCallback","boolCallBack","actionName","inputObject","state","callback","type","list","data","value","Compound1DInput","eventXPositive","eventXNegative","Compound2DInput","eventX","eventY","KeyboardKey","keyCode","MouseButton","btn","MouseWheel","type","MouseAxis","type","AxInputModule","bind","InputServiceName","InputService"]}